{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/utils/constants.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\n\n// Your program ID from Anchor.toml or target/idl\nexport const PROGRAM_ID = new PublicKey('C82ywxcsy6SahTq2CvdnGsN4xN1aKeWan7VR3mDQgi8V');\n\n// Network configuration\nexport const NETWORK = 'devnet';\nexport const ENDPOINT = 'https://api.devnet.solana.com';\n\n// Validation constants\nexport const MAX_DESCRIPTION_LENGTH = 280;\nexport const MAX_CANDIDATE_NAME_LENGTH = 32;"],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,aAAa,IAAI,6JAAA,CAAA,YAAS,CAAC;AAGjC,MAAM,UAAU;AAChB,MAAM,WAAW;AAGjB,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/components/WalletContextProvider.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { FC, ReactNode, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { PhantomWalletAdapter, SolflareWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { NETWORK, ENDPOINT } from '@/app/utils/constants';\n\n// Import styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface WalletContextProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletContextProvider: FC<WalletContextProviderProps> = ({ children }) => {\n  // Client-side only mounting to prevent hydration errors\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Using devnet for development\n  const network = NETWORK === 'devnet' \n    ? WalletAdapterNetwork.Devnet \n    : WalletAdapterNetwork.Mainnet;\n    \n  // Use your custom endpoint or fall back to the default\n  const endpoint = useMemo(() => ENDPOINT || clusterApiUrl(network), [network]);\n\n  // Configure supported wallets\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n    ],\n    [network]\n  );\n\n  // Only render children after mounting on client-side\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {/* Only render UI when client-side mounting is complete */}\n          {mounted ? children : null}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nexport default WalletContextProvider;"],"names":[],"mappings":";;;;;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AATA;;;;;;;;;;;AAkBO,MAAM,wBAAwD,CAAC,EAAE,QAAQ,EAAE;IAChF,wDAAwD;IACxD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,WAAW;IACb,GAAG,EAAE;IAEL,+BAA+B;IAC/B,MAAM,UAAU,yHAAA,CAAA,UAAO,KAAK,WACxB,4KAAA,CAAA,uBAAoB,CAAC,MAAM,GAC3B,4KAAA,CAAA,uBAAoB,CAAC,OAAO;IAEhC,uDAAuD;IACvD,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,yHAAA,CAAA,WAAQ,IAAI,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE,UAAU;QAAC;KAAQ;IAE5E,8BAA8B;IAC9B,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EACpB,IAAM;YACJ,IAAI,iLAAA,CAAA,uBAAoB;YACxB,IAAI,kLAAA,CAAA,wBAAqB,CAAC;gBAAE;YAAQ;SACrC,EACD;QAAC;KAAQ;IAGX,qDAAqD;IACrD,qBACE,8OAAC,0LAAA,CAAA,qBAAkB;QAAC,UAAU;kBAC5B,cAAA,8OAAC,sLAAA,CAAA,iBAAc;YAAC,SAAS;YAAS,WAAW;sBAC3C,cAAA,8OAAC,iMAAA,CAAA,sBAAmB;0BAEjB,UAAU,WAAW;;;;;;;;;;;;;;;;AAKhC;uCAEe","debugId":null}}]
}
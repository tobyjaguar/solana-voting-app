{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/utils/pdas.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\nimport { PROGRAM_ID } from './constants';\n\n// Get Poll PDA\nexport const getPollPDA = (pollId: BN): PublicKey => {\n  const pollIdBuffer = pollId.toArrayLike(Buffer, 'le', 8);\n  const [pda] = PublicKey.findProgramAddressSync(\n    [pollIdBuffer],\n    PROGRAM_ID\n  );\n  return pda;\n};\n\n// Get Candidate PDA\nexport const getCandidatePDA = (pollId: BN, candidateName: string): PublicKey => {\n  const pollIdBuffer = pollId.toArrayLike(Buffer, 'le', 8);\n  const [pda] = PublicKey.findProgramAddressSync(\n    [pollIdBuffer, Buffer.from(candidateName)],\n    PROGRAM_ID\n  );\n  return pda;\n};\n\n// Get Voter Record PDA\nexport const getVoterRecordPDA = (\n  pollId: BN, \n  candidateName: string, \n  voterPubkey: PublicKey\n): PublicKey => {\n  const pollIdBuffer = pollId.toArrayLike(Buffer, 'le', 8);\n  const [pda] = PublicKey.findProgramAddressSync(\n    [pollIdBuffer, Buffer.from(candidateName), voterPubkey.toBuffer()],\n    PROGRAM_ID\n  );\n  return pda;\n};"],"names":[],"mappings":";;;;;AAAA;AAEA;;;AAGO,MAAM,aAAa,CAAC;IACzB,MAAM,eAAe,OAAO,WAAW,CAAC,QAAQ,MAAM;IACtD,MAAM,CAAC,IAAI,GAAG,6JAAA,CAAA,YAAS,CAAC,sBAAsB,CAC5C;QAAC;KAAa,EACd,yHAAA,CAAA,aAAU;IAEZ,OAAO;AACT;AAGO,MAAM,kBAAkB,CAAC,QAAY;IAC1C,MAAM,eAAe,OAAO,WAAW,CAAC,QAAQ,MAAM;IACtD,MAAM,CAAC,IAAI,GAAG,6JAAA,CAAA,YAAS,CAAC,sBAAsB,CAC5C;QAAC;QAAc,OAAO,IAAI,CAAC;KAAe,EAC1C,yHAAA,CAAA,aAAU;IAEZ,OAAO;AACT;AAGO,MAAM,oBAAoB,CAC/B,QACA,eACA;IAEA,MAAM,eAAe,OAAO,WAAW,CAAC,QAAQ,MAAM;IACtD,MAAM,CAAC,IAAI,GAAG,6JAAA,CAAA,YAAS,CAAC,sBAAsB,CAC5C;QAAC;QAAc,OAAO,IAAI,CAAC;QAAgB,YAAY,QAAQ;KAAG,EAClE,yHAAA,CAAA,aAAU;IAEZ,OAAO;AACT","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/hooks/useVotingProgram.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Program, AnchorProvider, BN, Idl } from '@project-serum/anchor';\nimport { SystemProgram } from '@solana/web3.js';\nimport { PollAccount, CandidateAccount, StatusMessage } from '@/app/models/types';\nimport { PROGRAM_ID, NETWORK, ENDPOINT } from '@/app/utils/constants';\nimport { getPollPDA, getCandidatePDA, getVoterRecordPDA } from '@/app/utils/pdas';\n\n// Import the IDL - adjust the path as needed\nimport idlFile from '../../target/idl/solana_voting_app.json';\n\n// Function to adapt the IDL to the format Anchor expects\nconst adaptIdl = (rawIdl: any): Idl => {\n  // Create a basic Idl structure that Anchor can work with\n  const adaptedIdl: Idl = {\n    version: rawIdl.metadata?.version || \"0.1.0\",\n    name: rawIdl.metadata?.name || \"solana_voting_app\",\n    instructions: rawIdl.instructions || [],\n    accounts: [],\n    types: []\n  };\n\n  // Process accounts\n  if (rawIdl.accounts) {\n    adaptedIdl.accounts = rawIdl.accounts.map((account: any) => {\n      return {\n        name: account.name,\n        type: {\n          kind: \"struct\",\n          fields: []\n        }\n      };\n    });\n  }\n\n  // Process types if they exist\n  if (rawIdl.types) {\n    adaptedIdl.types = rawIdl.types.map((type: any) => {\n      // If the type already has a proper structure, use it\n      if (type.type?.kind === \"struct\" && type.type?.fields) {\n        return type;\n      }\n\n      // Otherwise create a minimal type definition\n      return {\n        name: type.name,\n        type: {\n          kind: \"struct\",\n          fields: []\n        }\n      };\n    });\n  }\n\n  // Add errors if they exist\n  if (rawIdl.errors) {\n    adaptedIdl.errors = rawIdl.errors;\n  }\n\n  return adaptedIdl;\n};\n\nexport const useVotingProgram = () => {\n  const { connection } = useConnection();\n  const { publicKey, connected } = useWallet();\n  const wallet = useAnchorWallet();\n\n  const [program, setProgram] = useState<Program | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState<StatusMessage | null>(null);\n  const [networkMismatch, setNetworkMismatch] = useState(false);\n\n  // Network check\n  useEffect(() => {\n    const checkNetwork = async () => {\n      if (!wallet || !connected) {\n        setStatus({\n          message: \"Please connect your wallet\",\n          isError: false\n        });\n        return;\n      }\n\n      try {\n        console.log(`Expected network: ${NETWORK}, endpoint: ${ENDPOINT}`);\n\n        try {\n          await connection.getLatestBlockhash();\n          console.log(\"Successfully connected to Solana network\");\n          setNetworkMismatch(false);\n        } catch (err) {\n          console.error(\"Network connection error:\", err);\n          setNetworkMismatch(true);\n          setStatus({\n            message: `Connection to ${NETWORK} failed. Please check your wallet and network settings.`,\n            isError: true\n          });\n        }\n      } catch (err) {\n        console.error(\"Network check error:\", err);\n      }\n    };\n\n    if (connected) {\n      checkNetwork();\n    }\n  }, [connection, wallet, connected, publicKey]);\n\n  // Program initialization\n  useEffect(() => {\n    const initializeProgram = async () => {\n      if (!wallet || networkMismatch) {\n        setProgram(null);\n        return;\n      }\n\n      try {\n        console.log(\"Initializing program with wallet:\", wallet.publicKey.toString());\n        console.log(\"Program ID:\", PROGRAM_ID.toString());\n\n        // Create provider\n        const provider = new AnchorProvider(\n          connection,\n          wallet,\n          {\n            commitment: 'confirmed',\n            preflightCommitment: 'confirmed',\n            skipPreflight: false\n          }\n        );\n\n        try {\n          // Adapt the IDL to the format Anchor expects\n          console.log(\"Adapting IDL to Anchor format\");\n          const adaptedIdl = adaptIdl(idlFile);\n\n          const programInstance = new Program(\n            adaptedIdl,\n            PROGRAM_ID,\n            provider\n          );\n\n          console.log(\"Program initialized successfully\");\n          setProgram(programInstance);\n          setStatus({\n            message: \"Connected to Solana program\",\n            isError: false\n          });\n        } catch (err) {\n          console.error(\"Error initializing program:\", err);\n          throw new Error(`Program initialization failed: ${err}`);\n        }\n      } catch (err) {\n        console.error('Failed to initialize program:', err);\n        setStatus({\n          message: `Failed to initialize program: ${err}`,\n          isError: true\n        });\n      }\n    };\n\n    initializeProgram();\n  }, [connection, wallet, networkMismatch]);\n\n  // Fetch all polls\n  const fetchPolls = async (): Promise<PollAccount[]> => {\n    if (!program) return [];\n\n    setLoading(true);\n    setStatus(null);\n\n    try {\n      // Fetch all poll accounts\n      const pollAccounts = await program.account.poll.all();\n      console.log(\"Raw poll accounts:\", pollAccounts);\n\n      // Transform the data\n      return pollAccounts.map(item => {\n        const account = item.account as any;\n        return {\n          publicKey: item.publicKey,\n          account: {\n            pollId: new BN(account.pollId?.toString() || account.poll_id?.toString() || '0'),\n            description: account.description || '',\n            pollStartTime: new BN(account.pollStartTime?.toString() || account.poll_start_time?.toString() || '0'),\n            pollEndTime: new BN(account.pollEndTime?.toString() || account.poll_end_time?.toString() || '0'),\n            candidateAmount: account.candidateAmount || account.candidate_amount || 0\n          }\n        };\n      });\n    } catch (err) {\n      console.error('Error fetching polls:', err);\n      setStatus({\n        message: `Failed to fetch polls: ${err}`,\n        isError: true\n      });\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch candidates for a specific poll\n  const fetchCandidates = async (pollId: BN): Promise<CandidateAccount[]> => {\n    if (!program) return [];\n\n    setLoading(true);\n    setStatus(null);\n\n    try {\n      // Fetch all candidates\n      const allCandidates = await program.account.candidate.all();\n      console.log(\"Raw candidate accounts:\", allCandidates);\n\n      // Transform the candidates\n      return allCandidates.map(item => {\n        const account = item.account as any;\n        return {\n          publicKey: item.publicKey,\n          account: {\n            candidateName: account.candidateName || account.candidate_name || '',\n            candidateVotes: new BN(account.candidateVotes?.toString() || account.candidate_votes?.toString() || '0')\n          }\n        };\n      });\n    } catch (err) {\n      console.error('Error fetching candidates:', err);\n      setStatus({\n        message: `Failed to fetch candidates: ${err}`,\n        isError: true\n      });\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new poll\n  const createPoll = async (description: string): Promise<boolean> => {\n    if (!program || !wallet) return false;\n\n    setLoading(true);\n    setStatus(null);\n\n    try {\n      // Generate a unique poll ID using current timestamp\n      const pollId = new BN(Date.now());\n\n      // Set poll duration - from now to 7 days in the future\n      const now = Math.floor(Date.now() / 1000);\n      const oneWeekFromNow = now + (7 * 24 * 60 * 60);\n\n      // Get the PDA for the poll\n      const pollPDA = getPollPDA(pollId);\n\n      console.log(\"Creating poll with PDA:\", pollPDA.toString());\n      console.log(\"Parameters:\", {\n        pollId: pollId.toString(),\n        description,\n        startTime: now,\n        endTime: oneWeekFromNow\n      });\n\n      // Log available methods to debug\n      console.log(\"Available methods:\", Object.keys(program.methods));\n\n      // Try to find the correct method name\n      const methodName = Object.keys(program.methods).find(\n        name => name.toLowerCase() === 'initialize_poll' || name === 'initializePoll'\n      );\n\n      if (!methodName) {\n        throw new Error('initialize_poll method not found in program');\n      }\n\n      console.log(\"Using method name:\", methodName);\n\n      // Use the found method name\n      const tx = await program.methods[methodName](\n        pollId,\n        description,\n        new BN(now),\n        new BN(oneWeekFromNow)\n      )\n        .accounts({\n          signer: wallet.publicKey,\n          poll: pollPDA,\n          system_program: SystemProgram.programId,\n        })\n        .rpc({ skipPreflight: true })\n        .catch(err => {\n          console.error(\"Detailed error:\", err);\n          if (err.logs) {\n            console.error(\"Transaction logs:\", err.logs);\n          }\n          throw err;\n        });\n\n      console.log(\"Poll created! Transaction signature:\", tx);\n\n      setStatus({\n        message: 'Poll created successfully!',\n        isError: false\n      });\n      return true;\n    } catch (err) {\n      console.error('Error creating poll:', err);\n\n      if (err.toString().includes('429')) {\n        setStatus({\n          message: 'Network is busy. Please try again in a few moments.',\n          isError: true\n        });\n      } else {\n        setStatus({\n          message: `Failed to create poll: ${err}`,\n          isError: true\n        });\n      }\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a candidate to a poll\n  const addCandidate = async (pollId: BN, candidateName: string): Promise<boolean> => {\n    if (!program || !wallet) return false;\n\n    setLoading(true);\n    setStatus(null);\n\n    try {\n      // Get the PDAs\n      const pollPDA = getPollPDA(pollId);\n      const candidatePDA = getCandidatePDA(pollId, candidateName);\n\n      console.log(\"Adding candidate to poll:\", pollPDA.toString());\n      console.log(\"Candidate PDA:\", candidatePDA.toString());\n      console.log(\"Parameters:\", {\n        pollId: pollId.toString(),\n        candidateName\n      });\n\n      // Use snake_case method name\n      const tx = await program.methods\n        .initialize_candidate(\n          pollId,\n          candidateName\n        )\n        .accounts({\n          signer: wallet.publicKey,\n          poll: pollPDA,\n          candidate: candidatePDA,\n          system_program: SystemProgram.programId,\n        })\n        .rpc();\n\n      console.log(\"Candidate added! Transaction signature:\", tx);\n\n      setStatus({\n        message: 'Candidate added successfully!',\n        isError: false\n      });\n      return true;\n    } catch (err) {\n      console.error('Error adding candidate:', err);\n\n      if (err.toString().includes('429')) {\n        setStatus({\n          message: 'Network is busy. Please try again in a few moments.',\n          isError: true\n        });\n      } else {\n        setStatus({\n          message: `Failed to add candidate: ${err}`,\n          isError: true\n        });\n      }\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Vote for a candidate\n  const vote = async (pollId: BN, candidateName: string): Promise<boolean> => {\n    if (!program || !wallet) return false;\n\n    setLoading(true);\n    setStatus(null);\n\n    try {\n      // Get the PDAs\n      const pollPDA = getPollPDA(pollId);\n      const candidatePDA = getCandidatePDA(pollId, candidateName);\n      const voterRecordPDA = getVoterRecordPDA(pollId, candidateName, wallet.publicKey);\n\n      console.log(\"Voting in poll:\", pollPDA.toString());\n      console.log(\"For candidate:\", candidatePDA.toString());\n      console.log(\"Voter record PDA:\", voterRecordPDA.toString());\n      console.log(\"Parameters:\", {\n        pollId: pollId.toString(),\n        candidateName\n      });\n\n      // Call the vote instruction with snake_case field names\n      const tx = await program.methods\n        .vote(\n          pollId,\n          candidateName\n        )\n        .accounts({\n          signer: wallet.publicKey,\n          poll: pollPDA,\n          candidate: candidatePDA,\n          voter_record: voterRecordPDA,\n          system_program: SystemProgram.programId,\n        })\n        .rpc();\n\n      console.log(\"Vote recorded! Transaction signature:\", tx);\n\n      setStatus({\n        message: 'Vote recorded successfully!',\n        isError: false\n      });\n      return true;\n    } catch (err) {\n      console.error('Error voting:', err);\n\n      if (err.toString().includes('429') || err.toString().toLowerCase().includes('rate limit')) {\n        setStatus({\n          message: 'The network is busy. Please try again in a few seconds.',\n          isError: true\n        });\n      } else {\n        setStatus({\n          message: `Failed to vote: ${err}`,\n          isError: true\n        });\n      }\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    program,\n    loading,\n    status,\n    fetchPolls,\n    fetchCandidates,\n    createPoll,\n    addCandidate,\n    vote,\n    networkMismatch\n  };\n};\n\nexport default useVotingProgram;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/components/CreatePollForm.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport useVotingProgram from '@/app/hooks/useVotingProgram';\nimport { MAX_DESCRIPTION_LENGTH } from '@/app/utils/constants';\n\ninterface CreatePollFormProps {\n  onPollCreated: () => void;\n}\n\nconst CreatePollForm = ({ onPollCreated }: CreatePollFormProps) => {\n  const [description, setDescription] = useState('');\n  const { createPoll, loading, status } = useVotingProgram();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!description.trim()) {\n      return;\n    }\n    \n    const success = await createPoll(description);\n    \n    if (success) {\n      setDescription('');\n      setTimeout(() => {\n        onPollCreated();\n      }, 2000);\n    }\n  };\n  \n  return (\n    <div className=\"bg-slate-800 p-4 rounded-lg mb-6\">\n      <h3 className=\"text-xl font-bold mb-4\">Create New Poll</h3>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"description\" className=\"block mb-2\">\n            Poll Description\n          </label>\n          <textarea\n            id=\"description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"w-full p-2 bg-slate-700 rounded border border-slate-600\"\n            placeholder=\"e.g., Which Solana project should we build next?\"\n            maxLength={MAX_DESCRIPTION_LENGTH}\n            rows={3}\n            required\n          />\n          <div className=\"text-xs text-slate-400 mt-1\">\n            {description.length}/{MAX_DESCRIPTION_LENGTH}\n          </div>\n        </div>\n        \n        <button\n          type=\"submit\"\n          disabled={loading || !description.trim()}\n          className=\"bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded disabled:opacity-50\"\n        >\n          {loading ? 'Creating...' : 'Create Poll'}\n        </button>\n      </form>\n      \n      {status && (\n        <div className={`mt-4 p-3 rounded ${status.isError ? 'bg-red-900/30 text-red-300' : 'bg-green-900/30 text-green-300'}`}>\n          {status.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CreatePollForm;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAUA,MAAM,iBAAiB,CAAC,EAAE,aAAa,EAAuB;IAC5D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAgB,AAAD;IAEvD,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,IAAI,CAAC,YAAY,IAAI,IAAI;YACvB;QACF;QAEA,MAAM,UAAU,MAAM,WAAW;QAEjC,IAAI,SAAS;YACX,eAAe;YACf,WAAW;gBACT;YACF,GAAG;QACL;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAyB;;;;;;0BAEvC,8OAAC;gBAAK,UAAU;;kCACd,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAM,SAAQ;gCAAc,WAAU;0CAAa;;;;;;0CAGpD,8OAAC;gCACC,IAAG;gCACH,OAAO;gCACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;gCAC9C,WAAU;gCACV,aAAY;gCACZ,WAAW,yHAAA,CAAA,yBAAsB;gCACjC,MAAM;gCACN,QAAQ;;;;;;0CAEV,8OAAC;gCAAI,WAAU;;oCACZ,YAAY,MAAM;oCAAC;oCAAE,yHAAA,CAAA,yBAAsB;;;;;;;;;;;;;kCAIhD,8OAAC;wBACC,MAAK;wBACL,UAAU,WAAW,CAAC,YAAY,IAAI;wBACtC,WAAU;kCAET,UAAU,gBAAgB;;;;;;;;;;;;YAI9B,wBACC,8OAAC;gBAAI,WAAW,CAAC,iBAAiB,EAAE,OAAO,OAAO,GAAG,+BAA+B,kCAAkC;0BACnH,OAAO,OAAO;;;;;;;;;;;;AAKzB;uCAEe","debugId":null}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/components/AddCandidateForm.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { BN } from '@project-serum/anchor';\nimport useVotingProgram from '@/app/hooks/useVotingProgram';\nimport { MAX_CANDIDATE_NAME_LENGTH } from '@/app/utils/constants';\n\ninterface AddCandidateFormProps {\n  pollId: BN;\n  onCandidateAdded: () => void;\n}\n\nconst AddCandidateForm = ({ pollId, onCandidateAdded }: AddCandidateFormProps) => {\n  const [candidateName, setCandidateName] = useState('');\n  const { addCandidate, loading, status } = useVotingProgram();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!candidateName.trim()) {\n      return;\n    }\n    \n    const success = await addCandidate(pollId, candidateName);\n    \n    if (success) {\n      setCandidateName('');\n      setTimeout(() => {\n        onCandidateAdded();\n      }, 2000);\n    }\n  };\n  \n  return (\n    <div className=\"bg-slate-900 p-4 rounded-lg mb-4\">\n      <h4 className=\"text-lg font-bold mb-3\">Add Project Option</h4>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"candidateName\" className=\"block mb-1 text-sm\">\n            Project Name\n          </label>\n          <input\n            id=\"candidateName\"\n            type=\"text\"\n            value={candidateName}\n            onChange={(e) => setCandidateName(e.target.value)}\n            className=\"w-full p-2 bg-slate-700 rounded border border-slate-600\"\n            placeholder=\"e.g., Solana DAO, Beer Token\"\n            maxLength={MAX_CANDIDATE_NAME_LENGTH}\n            required\n          />\n          <div className=\"text-xs text-slate-400 mt-1\">\n            {candidateName.length}/{MAX_CANDIDATE_NAME_LENGTH}\n          </div>\n        </div>\n        \n        <button\n          type=\"submit\"\n          disabled={loading || !candidateName.trim()}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white py-1.5 px-3 rounded text-sm disabled:opacity-50\"\n        >\n          {loading ? 'Adding...' : 'Add Project'}\n        </button>\n      </form>\n      \n      {status && (\n        <div className={`mt-3 p-2 rounded text-sm ${status.isError ? 'bg-red-900/30 text-red-300' : 'bg-green-900/30 text-green-300'}`}>\n          {status.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddCandidateForm;"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AALA;;;;;AAYA,MAAM,mBAAmB,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAyB;IAC3E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAgB,AAAD;IAEzD,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,IAAI,CAAC,cAAc,IAAI,IAAI;YACzB;QACF;QAEA,MAAM,UAAU,MAAM,aAAa,QAAQ;QAE3C,IAAI,SAAS;YACX,iBAAiB;YACjB,WAAW;gBACT;YACF,GAAG;QACL;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAyB;;;;;;0BAEvC,8OAAC;gBAAK,UAAU;;kCACd,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAM,SAAQ;gCAAgB,WAAU;0CAAqB;;;;;;0CAG9D,8OAAC;gCACC,IAAG;gCACH,MAAK;gCACL,OAAO;gCACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;gCAChD,WAAU;gCACV,aAAY;gCACZ,WAAW,yHAAA,CAAA,4BAAyB;gCACpC,QAAQ;;;;;;0CAEV,8OAAC;gCAAI,WAAU;;oCACZ,cAAc,MAAM;oCAAC;oCAAE,yHAAA,CAAA,4BAAyB;;;;;;;;;;;;;kCAIrD,8OAAC;wBACC,MAAK;wBACL,UAAU,WAAW,CAAC,cAAc,IAAI;wBACxC,WAAU;kCAET,UAAU,cAAc;;;;;;;;;;;;YAI5B,wBACC,8OAAC;gBAAI,WAAW,CAAC,yBAAyB,EAAE,OAAO,OAAO,GAAG,+BAA+B,kCAAkC;0BAC3H,OAAO,OAAO;;;;;;;;;;;;AAKzB;uCAEe","debugId":null}},
    {"offset": {"line": 712, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/components/CandidateList.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { BN } from '@project-serum/anchor';\nimport { CandidateAccount } from '@/app/models/types';\nimport useVotingProgram from '@/app/hooks/useVotingProgram';\n\ninterface CandidateListProps {\n  pollId: BN;\n  candidates: CandidateAccount[];\n  isActive: boolean;\n  onVoted: () => void;\n}\n\nconst CandidateList = ({ pollId, candidates, isActive, onVoted }: CandidateListProps) => {\n  const { vote, loading, status } = useVotingProgram();\n  const [votingFor, setVotingFor] = useState<string | null>(null);\n  \n  const handleVote = async (candidateName: string) => {\n    setVotingFor(candidateName);\n    const success = await vote(pollId, candidateName);\n    if (success) {\n      setTimeout(() => {\n        onVoted();\n        setVotingFor(null);\n      }, 2000);\n    } else {\n      setVotingFor(null);\n    }\n  };\n  \n  if (candidates.length === 0) {\n    return <p className=\"text-slate-400 text-center py-4\">No project options added yet.</p>;\n  }\n  \n  return (\n    <div>\n      <ul className=\"space-y-2\">\n        {candidates.map((candidate) => (\n          <li \n            key={candidate.account.candidateName} \n            className=\"bg-slate-700 p-3 rounded-lg flex justify-between items-center\"\n          >\n            <div>\n              <h5 className=\"font-medium\">{candidate.account.candidateName}</h5>\n              <p className=\"text-sm text-slate-300\">Votes: {candidate.account.candidateVotes.toString()}</p>\n            </div>\n            \n            {isActive && (\n              <button\n                onClick={() => handleVote(candidate.account.candidateName)}\n                disabled={loading || votingFor !== null}\n                className=\"bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded-lg text-sm disabled:opacity-50\"\n              >\n                {votingFor === candidate.account.candidateName ? 'Voting...' : 'Vote'}\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n      \n      {status && votingFor && (\n        <div className={`mt-3 p-2 rounded text-sm ${status.isError ? 'bg-red-900/30 text-red-300' : 'bg-green-900/30 text-green-300'}`}>\n          {status.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CandidateList;"],"names":[],"mappings":";;;;AAEA;AAGA;AALA;;;;AAcA,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAsB;IAClF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAgB,AAAD;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE1D,MAAM,aAAa,OAAO;QACxB,aAAa;QACb,MAAM,UAAU,MAAM,KAAK,QAAQ;QACnC,IAAI,SAAS;YACX,WAAW;gBACT;gBACA,aAAa;YACf,GAAG;QACL,OAAO;YACL,aAAa;QACf;IACF;IAEA,IAAI,WAAW,MAAM,KAAK,GAAG;QAC3B,qBAAO,8OAAC;YAAE,WAAU;sBAAkC;;;;;;IACxD;IAEA,qBACE,8OAAC;;0BACC,8OAAC;gBAAG,WAAU;0BACX,WAAW,GAAG,CAAC,CAAC,0BACf,8OAAC;wBAEC,WAAU;;0CAEV,8OAAC;;kDACC,8OAAC;wCAAG,WAAU;kDAAe,UAAU,OAAO,CAAC,aAAa;;;;;;kDAC5D,8OAAC;wCAAE,WAAU;;4CAAyB;4CAAQ,UAAU,OAAO,CAAC,cAAc,CAAC,QAAQ;;;;;;;;;;;;;4BAGxF,0BACC,8OAAC;gCACC,SAAS,IAAM,WAAW,UAAU,OAAO,CAAC,aAAa;gCACzD,UAAU,WAAW,cAAc;gCACnC,WAAU;0CAET,cAAc,UAAU,OAAO,CAAC,aAAa,GAAG,cAAc;;;;;;;uBAd9D,UAAU,OAAO,CAAC,aAAa;;;;;;;;;;YAqBzC,UAAU,2BACT,8OAAC;gBAAI,WAAW,CAAC,yBAAyB,EAAE,OAAO,OAAO,GAAG,+BAA+B,kCAAkC;0BAC3H,OAAO,OAAO;;;;;;;;;;;;AAKzB;uCAEe","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/components/PollCard.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { PollAccount, CandidateAccount } from '@/app/models/types';\nimport AddCandidateForm from './AddCandidateForm';\nimport CandidateList from './CandidateList';\nimport useVotingProgram from '@/app/hooks/useVotingProgram';\n\ninterface PollCardProps {\n  poll: PollAccount;\n  onRefresh: () => void;\n}\n\nconst PollCard = ({ poll, onRefresh }: PollCardProps) => {\n  const [candidates, setCandidates] = useState<CandidateAccount[]>([]);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  const { fetchCandidates } = useVotingProgram();\n  \n  // Check if poll is active\n  const now = Math.floor(Date.now() / 1000);\n  const isActive = poll.account.pollStartTime.lte(new BN(now)) && \n                   poll.account.pollEndTime.gte(new BN(now));\n  \n  // Load candidates for this poll\n  const loadCandidates = async () => {\n    setLoading(true);\n    const pollCandidates = await fetchCandidates(poll.account.pollId);\n    setCandidates(pollCandidates);\n    setLoading(false);\n  };\n  \n  useEffect(() => {\n    loadCandidates();\n  }, [poll]);\n  \n  const formatDate = (timestamp: BN) => {\n    return new Date(timestamp.toNumber() * 1000).toLocaleString();\n  };\n  \n  return (\n    <div className={`bg-slate-800 p-4 rounded-lg ${isActive ? 'border-l-4 border-green-500' : 'border-l-4 border-red-500 opacity-80'}`}>\n      <h3 className=\"text-xl font-bold mb-2\">{poll.account.description}</h3>\n      \n      <div className=\"text-sm text-slate-400 mb-4\">\n        <p>Status: {isActive ? 'Active' : 'Inactive'}</p>\n        <p>\n          Period: {formatDate(poll.account.pollStartTime)} to {formatDate(poll.account.pollEndTime)}\n        </p>\n      </div>\n      \n      {isActive && (\n        <div className=\"mb-4\">\n          <button\n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white py-1.5 px-3 rounded-lg text-sm\"\n          >\n            {showAddForm ? 'Cancel' : 'Add Project Option'}\n          </button>\n          \n          {showAddForm && (\n            <AddCandidateForm \n              pollId={poll.account.pollId} \n              onCandidateAdded={() => {\n                setShowAddForm(false);\n                loadCandidates();\n              }} \n            />\n          )}\n        </div>\n      )}\n      \n      <div>\n        <h4 className=\"text-lg font-semibold mb-3\">Project Options:</h4>\n        \n        {loading ? (\n          <p className=\"text-center py-4 text-slate-400\">Loading candidates...</p>\n        ) : (\n          <CandidateList\n            pollId={poll.account.pollId}\n            candidates={candidates}\n            isActive={isActive}\n            onVoted={() => {\n              loadCandidates();\n              onRefresh();\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PollCard;"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AANA;;;;;;AAaA,MAAM,WAAW,CAAC,EAAE,IAAI,EAAE,SAAS,EAAiB;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAsB,EAAE;IACnE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAgB,AAAD;IAE3C,0BAA0B;IAC1B,MAAM,MAAM,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;IACpC,MAAM,WAAW,KAAK,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,GAAG,SACtC,KAAK,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,GAAG;IAErD,gCAAgC;IAChC,MAAM,iBAAiB;QACrB,WAAW;QACX,MAAM,iBAAiB,MAAM,gBAAgB,KAAK,OAAO,CAAC,MAAM;QAChE,cAAc;QACd,WAAW;IACb;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAK;IAET,MAAM,aAAa,CAAC;QAClB,OAAO,IAAI,KAAK,UAAU,QAAQ,KAAK,MAAM,cAAc;IAC7D;IAEA,qBACE,8OAAC;QAAI,WAAW,CAAC,4BAA4B,EAAE,WAAW,gCAAgC,wCAAwC;;0BAChI,8OAAC;gBAAG,WAAU;0BAA0B,KAAK,OAAO,CAAC,WAAW;;;;;;0BAEhE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;4BAAE;4BAAS,WAAW,WAAW;;;;;;;kCAClC,8OAAC;;4BAAE;4BACQ,WAAW,KAAK,OAAO,CAAC,aAAa;4BAAE;4BAAK,WAAW,KAAK,OAAO,CAAC,WAAW;;;;;;;;;;;;;YAI3F,0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,SAAS,IAAM,eAAe,CAAC;wBAC/B,WAAU;kCAET,cAAc,WAAW;;;;;;oBAG3B,6BACC,8OAAC,sIAAA,CAAA,UAAgB;wBACf,QAAQ,KAAK,OAAO,CAAC,MAAM;wBAC3B,kBAAkB;4BAChB,eAAe;4BACf;wBACF;;;;;;;;;;;;0BAMR,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;oBAE1C,wBACC,8OAAC;wBAAE,WAAU;kCAAkC;;;;;6CAE/C,8OAAC,mIAAA,CAAA,UAAa;wBACZ,QAAQ,KAAK,OAAO,CAAC,MAAM;wBAC3B,YAAY;wBACZ,UAAU;wBACV,SAAS;4BACP;4BACA;wBACF;;;;;;;;;;;;;;;;;;AAMZ;uCAEe","debugId":null}},
    {"offset": {"line": 982, "column": 0}, "map": {"version":3,"sources":["file:///Users/talgya/dev/solana/solana-voting-app/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport useVotingProgram from '@/app/hooks/useVotingProgram';\nimport { PollAccount } from '@/app/models/types';\nimport CreatePollForm from '@/app/components/CreatePollForm';\nimport PollCard from '@/app/components/PollCard';\n\nexport default function Home() {\n  const { publicKey } = useWallet();\n  const { fetchPolls, loading, status } = useVotingProgram();\n  \n  const [polls, setPolls] = useState<PollAccount[]>([]);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  \n  // Load polls when wallet connects\n  const loadPolls = async () => {\n    if (publicKey) {\n      const fetchedPolls = await fetchPolls();\n      setPolls(fetchedPolls);\n    }\n  };\n  \n  // Load polls on initial render and when wallet changes\n  useEffect(() => {\n    loadPolls();\n  }, [publicKey]);\n  \n  return (\n    <main className=\"flex min-h-screen flex-col py-8 bg-slate-900 text-white\">\n      <div className=\"w-full max-w-5xl mx-auto\">\n        <header className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-12 pb-6 border-b border-slate-700\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4 md:mb-0 bg-gradient-to-r from-purple-400 to-blue-500 text-transparent bg-clip-text\">\n            Solana Dev Meetup Voting\n          </h1>\n          <WalletMultiButton />\n        </header>\n        \n        <div className=\"mb-8\">\n          {publicKey ? (\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-semibold\">\n                {polls.length > 0 ? 'Active Polls' : 'No Polls Found'}\n              </h2>\n              <button \n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white py-2 px-4 rounded-lg\"\n                onClick={() => setShowCreateForm(!showCreateForm)}\n              >\n                {showCreateForm ? 'Cancel' : 'Create New Poll'}\n              </button>\n            </div>\n          ) : (\n            <div className=\"bg-slate-800 py-12 rounded-lg flex flex-col items-center\">\n              <h2 className=\"text-2xl font-semibold mb-4\">Welcome to Solana Dev Meetup Voting</h2>\n              <p className=\"text-center text-slate-400 mb-6 max-w-md\">\n                Connect your wallet to create polls and vote on project ideas for your next Solana dev meetup\n              </p>\n              <WalletMultiButton />\n            </div>\n          )}\n        </div>\n        \n        {/* Status Messages */}\n        {status && (\n          <div className={`p-4 rounded-lg mb-6 ${status.isError ? 'bg-red-900/30 text-red-300' : 'bg-green-900/30 text-green-300'}`}>\n            {status.message}\n          </div>\n        )}\n        \n        {/* Create Poll Form */}\n        {showCreateForm && publicKey && (\n          <div className=\"mb-8\">\n            <CreatePollForm onPollCreated={() => {\n              setShowCreateForm(false);\n              loadPolls();\n            }} />\n          </div>\n        )}\n        \n        {/* Polls List */}\n        {publicKey && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {loading && polls.length === 0 ? (\n              <div className=\"col-span-full text-center py-8 text-slate-400\">\n                Loading polls...\n              </div>\n            ) : polls.length > 0 ? (\n              polls.map((poll) => (\n                <PollCard \n                  key={poll.publicKey.toString()} \n                  poll={poll}\n                  onRefresh={loadPolls}\n                />\n              ))\n            ) : !loading && (\n              <div className=\"col-span-full text-center py-8 text-slate-400\">\n                No polls found. Create one to get started!\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AARA;;;;;;;;AAUe,SAAS;IACtB,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD;IAC9B,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAgB,AAAD;IAEvD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IACpD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErD,kCAAkC;IAClC,MAAM,YAAY;QAChB,IAAI,WAAW;YACb,MAAM,eAAe,MAAM;YAC3B,SAAS;QACX;IACF;IAEA,uDAAuD;IACvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAU;IAEd,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAO,WAAU;;sCAChB,8OAAC;4BAAG,WAAU;sCAAyH;;;;;;sCAGvI,8OAAC,+LAAA,CAAA,oBAAiB;;;;;;;;;;;8BAGpB,8OAAC;oBAAI,WAAU;8BACZ,0BACC,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CACX,MAAM,MAAM,GAAG,IAAI,iBAAiB;;;;;;0CAEvC,8OAAC;gCACC,WAAU;gCACV,SAAS,IAAM,kBAAkB,CAAC;0CAEjC,iBAAiB,WAAW;;;;;;;;;;;6CAIjC,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAA8B;;;;;;0CAC5C,8OAAC;gCAAE,WAAU;0CAA2C;;;;;;0CAGxD,8OAAC,+LAAA,CAAA,oBAAiB;;;;;;;;;;;;;;;;gBAMvB,wBACC,8OAAC;oBAAI,WAAW,CAAC,oBAAoB,EAAE,OAAO,OAAO,GAAG,+BAA+B,kCAAkC;8BACtH,OAAO,OAAO;;;;;;gBAKlB,kBAAkB,2BACjB,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,oIAAA,CAAA,UAAc;wBAAC,eAAe;4BAC7B,kBAAkB;4BAClB;wBACF;;;;;;;;;;;gBAKH,2BACC,8OAAC;oBAAI,WAAU;8BACZ,WAAW,MAAM,MAAM,KAAK,kBAC3B,8OAAC;wBAAI,WAAU;kCAAgD;;;;;+BAG7D,MAAM,MAAM,GAAG,IACjB,MAAM,GAAG,CAAC,CAAC,qBACT,8OAAC,8HAAA,CAAA,UAAQ;4BAEP,MAAM;4BACN,WAAW;2BAFN,KAAK,SAAS,CAAC,QAAQ;;;;oCAK9B,CAAC,yBACH,8OAAC;wBAAI,WAAU;kCAAgD;;;;;;;;;;;;;;;;;;;;;;AAS7E","debugId":null}}]
}